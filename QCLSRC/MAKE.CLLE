PGM
/* THE FOLLOWING PATH IS USED BY THE TEST PROGRAMS TO PROVIDE A FOLDER +
   TO CREATE THEIR OUTPUT IN. YOU CAN CHANGE THE PATH HERE OR LEAVE IT, +
   BUT EITHER WAY YOU NEED TO MAKE SURE THE FOLDER IS SETUP AND THAT +
   ANY USERS PROGRAMMING WITH THIS PACKAGE HAVE AUTHORITY TO IT. THE +
   END USERS DO NOT NEED AUTHORITY TO IT, JUST ANYONE RUNNING THE TEST +
   PROGRAMS. */
   DCL  &testdir   *char 10 '/#$XLSX1.0'

/* PROGRAM DEFAULT VARIABLES, NO NEED TO CHANGE IF CREATING LIBRARY #$XLSX */
   DCL  &olib      *char 10 '#$XLSX1.0 '    /* OBJECT LIBRARY */
   DCL  &slib      *char 10 '#$XLSX1.0 '    /* SOURCE LIBRARY */
   DCL  &optimize  *char  2 '10'
   DCL  &output    *char 10 '*PRINT'
   DCL  &debug     *char 10 '*ALL'
   DCL  &sysifcopt *char 10 '*IFS64IO'
   DCL  &TGTRLS    *char 10 '*CURRENT'

/* WORK VARIABLES */
   DCL  &CCSID     *DEC  (5 0)
   DCL  &OBJ       *char 60

/* SAVE THE JOB CCSID AND CHANGE IT TO 37 TEMPORARILY */
   RTVJOBA    CCSID(&CCSID)
   CHGJOB CCSID(37)

/* START CREATING MODULES FOR ZLIB */
   CRTCMOD &SLIB/ADLER32  SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/compress SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/crc32    SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/deflate  SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/gzio     SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/infback  SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/inffast  SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/inflate  SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/inftrees SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/ioapi    SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/trees    SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/uncompr  SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)
   CRTCMOD &SLIB/zutil    SRCFILE(&SLIB/QCSRC) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) +
                          DEFINE(AS400 HAVE_MEMCPY OS400) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS)

/* CREATE SERVICE PROGRAM ZLIB */
   CRTSRVPGM SRVPGM(&OLIB/ZLIB) +
             MODULE(&SLIB/adler32 &SLIB/compress &SLIB/crc32 &SLIB/deflate  +
                    &SLIB/gzio &SLIB/infback &SLIB/inffast &SLIB/inflate +
                    &SLIB/inftrees &SLIB/ioapi &SLIB/trees &SLIB/uncompr &SLIB/zutil) +
             EXPORT(*ALL) TGTRLS(&TGTRLS) TEXT('zlib 1.2.1 *SRVPGM for OS/400')

/* CREATE PROGRAM AND MODULES MINIUNZ/MINIZIP FOR OS/400 */
   CRTCMOD &SLIB/miniunz400 &SLIB/QCSRC SRCMBR(miniunz) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) +
                            DBGVIEW(&DEBUG) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS) +
                            DEFINE(AS400 'unix' NODOBANNER FPRINT2SNDMSG CASESENSITIVITYDEFAULT_NO)
   CRTCMOD &SLIB/minizip400 &SLIB/QCSRC SRCMBR(minizip) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) +
                            DBGVIEW(&DEBUG) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS) +
                            DEFINE(AS400 'unix' NODOBANNER FPRINT2SNDMSG CASESENSITIVITYDEFAULT_NO)
   CRTCMOD &SLIB/zip400     &SLIB/QCSRC SRCMBR(zip) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) +
                            DBGVIEW(&DEBUG) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS) +
                            DEFINE(AS400 'unix' NODOBANNER FPRINT2SNDMSG CASESENSITIVITYDEFAULT_NO)
   CRTCMOD &SLIB/unzip400   &SLIB/QCSRC SRCMBR(unzip) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) +
                            DBGVIEW(&DEBUG) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS) +
                            DEFINE(AS400 'unix' NODOBANNER FPRINT2SNDMSG CASESENSITIVITYDEFAULT_NO)
   CRTCMOD &SLIB/ebcdic400  &SLIB/QCSRC SRCMBR(ebcdic) OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) +
                            DBGVIEW(&DEBUG) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS) +
                            DEFINE(AS400 'unix' NODOBANNER FPRINT2SNDMSG CASESENSITIVITYDEFAULT_NO)

/* CREATE PROGRAM MINIUNZ400 */
   CRTPGM PGM(&OLIB/MINIUNZ400) +
          MODULE(&SLIB/MINIUNZ400 &SLIB/UNZIP400 &SLIB/EBCDIC400) +
          BNDSRVPGM(&OLIB/ZLIB) DETAIL(*BASIC) TGTRLS(&TGTRLS) +
          TEXT('miniunz for OS/400')

/* create program MINIZIP400 */
   CRTPGM PGM(&OLIB/MINIZIP400) +
          MODULE(&SLIB/MINIZIP400 &SLIB/ZIP400 &SLIB/EBCDIC400) +
          BNDSRVPGM(&OLIB/ZLIB) DETAIL(*BASIC) TGTRLS(&TGTRLS) +
          TEXT('minizip for OS/400')

/* CREATE PROGRAM AND MODULES MINIUNZ/MINIZIP FOR QSHELL */
   CRTCMOD MODULE(&SLIB/miniunz) SRCFILE(&SLIB/QCSRC) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS) +
           OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) DEFINE(AS400 'unix')
   CRTCMOD MODULE(&SLIB/minizip) SRCFILE(&SLIB/QCSRC) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS) +
           OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) DEFINE(AS400 'unix')
   CRTCMOD MODULE(&SLIB/zip) SRCFILE(&SLIB/QCSRC) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS) +
           OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) DEFINE(AS400 'unix')
   CRTCMOD MODULE(&SLIB/unzip) SRCFILE(&SLIB/QCSRC) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS) +
           OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) DEFINE(AS400 'unix')
   CRTCMOD MODULE(&SLIB/ebcdic) SRCFILE(&SLIB/QCSRC) SYSIFCOPT(&SYSIFCOPT) TGTRLS(&TGTRLS) +
           OUTPUT(&OUTPUT) OPTIMIZE(&OPTIMIZE) DBGVIEW(&DEBUG) DEFINE(AS400 'unix')

/* CREATE PROGRAM MINIUNZ */
   CRTPGM PGM(&OLIB/MINIUNZ) MODULE(&SLIB/MINIUNZ &SLIB/UNZIP &SLIB/EBCDIC) +
          BNDSRVPGM(&OLIB/ZLIB) DETAIL(*BASIC) TGTRLS(&TGTRLS) TEXT('miniunz for Qshell')

/* CREATE PROGRAM MINIZIP */
   CRTPGM PGM(&OLIB/MINIZIP) MODULE(&SLIB/MINIZIP &SLIB/ZIP &SLIB/EBCDIC) +
          BNDSRVPGM(&OLIB/ZLIB) DETAIL(*BASIC) TGTRLS(&TGTRLS) TEXT('minizip for Qshell')

/* REMOVE/ADD SYMBOLIC LINK */
   RMVDIR     DIR('/usr/bin/minizip')
   MONMSG     CPF0000 EXEC(DO)
             SNDPGMMSG  MSG('Links for qShell environment not setup.')
             GOTO SKIPLINKS
   ENDDO
   CHGVAR     &OBJ ('/qsys.lib/' *TCAT &OLIB *TCAT '.lib/minizip.pgm')
   ADDLNK     OBJ(&OBJ) NEWLNK('/usr/bin/minizip') LNKTYPE(*SYMBOLIC)
   RMVDIR     DIR('/usr/bin/miniunz')
   MONMSG     MSGID(CPFA0A9)
   CHGVAR     &OBJ ('/qsys.lib/' *TCAT &OLIB *TCAT '.lib/miniunz.pgm')
   ADDLNK     OBJ(&OBJ) NEWLNK('/usr/bin/miniunz') LNKTYPE(*SYMBOLIC)
   SKIPLINKS:

/* RE-CREATE SERVICE PROGRAM ZLIB, THIS ADDS THE ZIP AND UNZIP MODULES */
/* THIS HAS TO BE DONE BECAUSE ZIP AND UNZIP USE THE SERVICE PROGRAM TO */
/* GET COMPILED, SO WE HAVE TO MAKE IT ONCE WIHTOUT THEM, THEN AGAIN WITH THEM */
   CRTSRVPGM SRVPGM(&OLIB/ZLIB) +
             MODULE(&SLIB/adler32 &SLIB/compress &SLIB/crc32 &SLIB/deflate  +
                    &SLIB/gzio &SLIB/infback &SLIB/inffast &SLIB/inflate +
                    &SLIB/inftrees &SLIB/ioapi &SLIB/trees &SLIB/uncompr +
                    &SLIB/zutil &SLIB/ZIP &SLIB/UNZIP) +
             EXPORT(*ALL) TGTRLS(&TGTRLS) TEXT('zlib 1.2.1 *SRVPGM for OS/400') +
             BNDSRVPGM(QHTTPSVR/QZHBCGI)

/* CLEAN UP MODULES, WE DO NOT NEED THEM AFTER THE PROGRAMS ARE BUILT */
   DLTOBJ    &SLIB/ADLER32    OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/COMPRESS   OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/CRC32      OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/DEFLATE    OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/EBCDIC     OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/EBCDIC400  OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/GZIO       OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/INFBACK    OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/INFFAST    OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/INFLATE    OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/INFTREES   OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/IOAPI      OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/MINIUNZ    OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/MINIUNZ400 OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/MINIZIP    OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/MINIZIP400 OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/TREES      OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/UNCOMPR    OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/UNZIP      OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/UNZIP400   OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/ZIP        OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/ZIP400     OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/ZUTIL      OBJTYPE(*MODULE)

/* CREATE OS/400 COMMAND INTERFACE AND HELPER COMMANDS */
   CRTPNLGRP &OLIB/DSPZIP   SRCFILE(&SLIB/QPNLSRC)
   CRTPNLGRP &OLIB/UNZIP    SRCFILE(&SLIB/QPNLSRC)
   CRTPNLGRP &OLIB/ZIP      SRCFILE(&SLIB/QPNLSRC)
   CRTPNLGRP &OLIB/RTVIFSA  SRCFILE(&SLIB/QPNLSRC)
   CRTPNLGRP &OLIB/IFS2SRC  SRCFILE(&SLIB/QPNLSRC)
   CRTPNLGRP &OLIB/SRC2IFS  SRCFILE(&SLIB/QPNLSRC)
   CRTCLMOD  &SLIB/DSPZIP SRCFILE(&SLIB/QCLSRC) TGTRLS(&TGTRLS) DBGVIEW(&DEBUG)
   CRTCLMOD  &SLIB/UNZIP  SRCFILE(&SLIB/QCLSRC) TGTRLS(&TGTRLS) DBGVIEW(&DEBUG)
   CRTCLMOD  &SLIB/ZIP    SRCFILE(&SLIB/QCLSRC) TGTRLS(&TGTRLS) DBGVIEW(&DEBUG)
   CRTPGM    &OLIB/DSPZIP   MODULE(&SLIB/DSPZIP)  TGTRLS(&TGTRLS) BNDSRVPGM(QHTTPSVR/QZHBCGI)
   CRTPGM    &OLIB/UNZIP    MODULE(&SLIB/UNZIP)   TGTRLS(&TGTRLS) BNDSRVPGM(QHTTPSVR/QZHBCGI)
   CRTPGM    &OLIB/ZIP      MODULE(&SLIB/ZIP)     TGTRLS(&TGTRLS) BNDSRVPGM(QHTTPSVR/QZHBCGI)
   DLTOBJ    &SLIB/DSPZIP OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/UNZIP  OBJTYPE(*MODULE)
   DLTOBJ    &SLIB/ZIP    OBJTYPE(*MODULE)
   CRTBNDCL  &OLIB/RTVIFSA  SRCFILE(&SLIB/QCLSRC)
   CRTCMD    &OLIB/RTVIFSA  PGM(&OLIB/IFS2SRC) SRCFILE(&SLIB/QCMDSRC) +
                            ALLOW(*IPGM *BPGM *IREXX *BREXX)
   CRTBNDCL  &OLIB/IFS2SRC  SRCFILE(&SLIB/QCLSRC)
   CRTBNDCL  &OLIB/SRC2IFS  SRCFILE(&SLIB/QCLSRC)
   CRTBNDRPG &OLIB/SRC2IFS2 SRCFILE(&SLIB/QRPGLESRC)
   CRTCMD    &OLIB/DSPZIP   PGM(&OLIB/DSPZIP)  SRCFILE(&SLIB/QCMDSRC)
   CRTCMD    &OLIB/UNZIP    PGM(&OLIB/UNZIP)   SRCFILE(&SLIB/QCMDSRC)
   CRTCMD    &OLIB/ZIP      PGM(&OLIB/ZIP)     SRCFILE(&SLIB/QCMDSRC)
   CRTCMD    &OLIB/IFS2SRC  PGM(&OLIB/IFS2SRC) SRCFILE(&SLIB/QCMDSRC)
   CRTCMD    &OLIB/SRC2IFS  PGM(&OLIB/SRC2IFS) SRCFILE(&SLIB/QCMDSRC)

/* CREATE A BINDING DIRECTORY FOR THE ZIP C SERVICE PROGRAMS */
   DLTOBJ     OBJ(&OLIB/ZLIB) OBJTYPE(*BNDDIR)
   MONMSG     MSGID(CPF0000)
   CRTBNDDIR  BNDDIR(&OLIB/ZLIB) AUT(*LIBCRTAUT) TEXT('Binding directory for ZLIB programs')
   ADDBNDDIRE BNDDIR(&OLIB/ZLIB) OBJ((&OLIB/ZLIB))

/* BUILD THE #$ZIP SERVICE PROGRAM */
   CRTRPGMOD  &SLIB/#$ZIP SRCFILE(&SLIB/QRPGLESRC) DBGVIEW(*ALL)
   CRTSRVPGM  &OLIB/#$ZIP   MODULE(&SLIB/#$ZIP) TEXT('Create Zip Files') EXPORT(*SRCFILE)
   DLTOBJ     &SLIB/#$ZIP OBJTYPE(*MODULE)

/* CREATE A BINDING DIRECTORY FOR THE #$ZIP SERVICE PROGRAMS */
   DLTOBJ     OBJ(&OLIB/#$ZIP) OBJTYPE(*BNDDIR)
   MONMSG     MSGID(CPF0000)
   CRTBNDDIR  BNDDIR(&OLIB/#$ZIP) AUT(*LIBCRTAUT) +
              TEXT('Binding directory for #$ZIP service program')
   ADDBNDDIRE BNDDIR(&OLIB/#$ZIP) OBJ((&OLIB/#$ZIP))

/* BUILD THE #$ZIP EXAMPLE/TEST PROGRAMS */
   CRTBNDRPG  &OLIB/#$ZIPTS  SRCFILE(&SLIB/QRPGLESRC) REPLACE(*YES)
   CRTBNDRPG  &OLIB/#$ZIPTS2 SRCFILE(&SLIB/QRPGLESRC) REPLACE(*YES)

/* BUILD THE #$XLSX SERVICE PROGRAM */
   CRTRPGMOD  &SLIB/#$XLSX TGTRLS(V7R2M0) SRCFILE(&SLIB/QRPGLESRC) DBGVIEW(*ALL)
   CRTSRVPGM  &OLIB/#$XLSX   MODULE(&SLIB/#$XLSX) EXPORT(*SRCFILE) BNDSRVPGM(#$XLSX/#$ZIP) +
                             TEXT('Create Pretty Excel File') TGTRLS(V7R2M0)
   DLTOBJ     &SLIB/#$XLSX OBJTYPE(*MODULE)

/* CREATE A BINDING DIRECTORY FOR THE #$XLSX SERVICE PROGRAM */
   DLTOBJ     OBJ(&OLIB/#$XLSX) OBJTYPE(*BNDDIR)
   MONMSG     MSGID(CPF0000)
   CRTBNDDIR  BNDDIR(&OLIB/#$XLSX) AUT(*LIBCRTAUT) TEXT('Binding directory for #$XLSX')
   ADDBNDDIRE BNDDIR(&OLIB/#$XLSX) OBJ((&OLIB/#$XLSX))

/* BUILD THE MESSAGE FILE CREATION PROGRAMS AND RUN THEM */
   CRTBNDCL   PGM(&OLIB/#$ZIPMSG) SRCFILE(&SLIB/QCLSRC)
   CRTBNDCL   PGM(&OLIB/#$XLSXMSG) SRCFILE(&SLIB/QCLSRC)
   CALL       PGM(&OLIB/#$ZIPMSG)
   CALL       PGM(&OLIB/#$XLSXMSG)

/* SETUP THE DATA AREA FOR THE TEST PROGRAMS DIRECTORY FOR OUTPUT FILES */
   CRTDTAARA  DTAARA(&OLIB/#$XLSXTEMP) TYPE(*CHAR) LEN(100) +
              TEXT('Data Area for #$XLSX/ZIP for test programs')
   MONMSG     MSGID(CPF0000)
   CHGDTAARA  DTAARA(&OLIB/#$XLSXTEMP *ALL) VALUE(&TESTDIR)

/* BUILD THE #$XLSX EXAMPLE/TEST PROGRAMS */
   CRTBNDRPG  PGM(&OLIB/#$XLSXE1)  SRCFILE(&SLIB/QRPGLESRC) REPLACE(*YES)
   CRTBNDRPG  PGM(&OLIB/#$XLSXE1F) SRCFILE(&SLIB/QRPGLESRC) REPLACE(*YES)
   CRTSQLRPGI OBJ(&OLIB/#$XLSXINV) SRCFILE(&SLIB/QRPGLESRC) REPLACE(*YES)
   CALL       PGM(&OLIB/#$XLSXINV) PARM(&OLIB)
   CRTBNDRPG  PGM(&OLIB/#$XLSXE2)  SRCFILE(&SLIB/QRPGLESRC) REPLACE(*YES)
   CRTBNDRPG  PGM(&OLIB/#$XLSXE3)  SRCFILE(&SLIB/QRPGLESRC) REPLACE(*YES)
   CRTSQLRPGI OBJ(&OLIB/#$XLSXE9PF) SRCFILE(&SLIB/QRPGLESRC) REPLACE(*YES)
   CALL       PGM(&OLIB/#$XLSXE9PF) PARM(&OLIB)
   CRTSQLRPGI OBJ(&OLIB/#$XLSXE9)  SRCFILE(&SLIB/QRPGLESRC) REPLACE(*YES)

/* BUILD SOME TEMP PROGRAMS */
   CRTBNDRPG &OLIB/COPYSRC  SRCFILE(&SLIB/QRPGLESRC)
   CRTBNDRPG &OLIB/COPYIFS  SRCFILE(&SLIB/QRPGLESRC)
   CRTBNDCL  &OLIB/IFS2SRC  SRCFILE(&SLIB/QCLSRC)

/* CHANGE THE JOB CCSID BACK TO WHATEVER IT WAS BEFORE */
   CHGJOB CCSID(&CCSID)

ENDPGM
